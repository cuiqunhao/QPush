// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message {

namespace {

const ::google::protobuf::Descriptor* PBAPNSUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAPNSUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAPNSBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAPNSBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAPNSMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAPNSMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PBAPNSMessage_OfflineModes_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PBAPNSEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAPNSEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PBAPNSEvent_Ops_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PBAPNSEvent_DeviceTypes_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pb_5fmessage_2eproto() {
  protobuf_AddDesc_pb_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pb_message.proto");
  GOOGLE_CHECK(file != NULL);
  PBAPNSUserInfo_descriptor_ = file->message_type(0);
  static const int PBAPNSUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSUserInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSUserInfo, value_),
  };
  PBAPNSUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAPNSUserInfo_descriptor_,
      PBAPNSUserInfo::default_instance_,
      PBAPNSUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAPNSUserInfo));
  PBAPNSBody_descriptor_ = file->message_type(1);
  static const int PBAPNSBody_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSBody, alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSBody, sound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSBody, badge_),
  };
  PBAPNSBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAPNSBody_descriptor_,
      PBAPNSBody::default_instance_,
      PBAPNSBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAPNSBody));
  PBAPNSMessage_descriptor_ = file->message_type(2);
  static const int PBAPNSMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSMessage, offlinemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSMessage, aps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSMessage, userinfo_),
  };
  PBAPNSMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAPNSMessage_descriptor_,
      PBAPNSMessage::default_instance_,
      PBAPNSMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAPNSMessage));
  PBAPNSMessage_OfflineModes_descriptor_ = PBAPNSMessage_descriptor_->enum_type(0);
  PBAPNSEvent_descriptor_ = file->message_type(3);
  static const int PBAPNSEvent_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSEvent, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSEvent, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSEvent, appkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSEvent, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSEvent, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSEvent, read_),
  };
  PBAPNSEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAPNSEvent_descriptor_,
      PBAPNSEvent::default_instance_,
      PBAPNSEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAPNSEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAPNSEvent));
  PBAPNSEvent_Ops_descriptor_ = PBAPNSEvent_descriptor_->enum_type(0);
  PBAPNSEvent_DeviceTypes_descriptor_ = PBAPNSEvent_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pb_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAPNSUserInfo_descriptor_, &PBAPNSUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAPNSBody_descriptor_, &PBAPNSBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAPNSMessage_descriptor_, &PBAPNSMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAPNSEvent_descriptor_, &PBAPNSEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pb_5fmessage_2eproto() {
  delete PBAPNSUserInfo::default_instance_;
  delete PBAPNSUserInfo_reflection_;
  delete PBAPNSBody::default_instance_;
  delete PBAPNSBody_reflection_;
  delete PBAPNSMessage::default_instance_;
  delete PBAPNSMessage_reflection_;
  delete PBAPNSEvent::default_instance_;
  delete PBAPNSEvent_reflection_;
}

void protobuf_AddDesc_pb_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020pb_message.proto\022\007message\",\n\016PBAPNSUse"
    "rInfo\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"9\n\nPBA"
    "PNSBody\022\r\n\005alert\030\001 \001(\t\022\r\n\005sound\030\002 \001(\t\022\r\n"
    "\005badge\030\003 \001(\005\"\254\001\n\rPBAPNSMessage\022\023\n\013offlin"
    "eMode\030\001 \001(\005\022 \n\003aps\030\002 \002(\0132\023.message.PBAPN"
    "SBody\022)\n\010userInfo\030\003 \003(\0132\027.message.PBAPNS"
    "UserInfo\"9\n\014OfflineModes\022\n\n\006Ignore\020\000\022\010\n\004"
    "APNS\020\001\022\023\n\017SendAfterOnline\020\002\"\350\001\n\013PBAPNSEv"
    "ent\022\n\n\002op\030\001 \002(\005\022\r\n\005token\030\002 \002(\t\022\016\n\006appKey"
    "\030\003 \002(\t\022\016\n\006userId\030\004 \002(\t\022\016\n\006typeId\030\005 \002(\005\022\014"
    "\n\004read\030\006 \001(\005\"[\n\003Ops\022\n\n\006Online\020\001\022\r\n\tKeepA"
    "live\020\002\022\013\n\007PushAck\020\003\022\013\n\007Offline\020\004\022\t\n\005Erro"
    "r\020\000\022\t\n\005Sleep\020\005\022\t\n\005Awake\020\006\"#\n\013DeviceTypes"
    "\022\007\n\003iOS\020\001\022\013\n\007Android\020\002B\033\n\027com.argo.qpush"
    ".protobufP\001", 571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb_message.proto", &protobuf_RegisterTypes);
  PBAPNSUserInfo::default_instance_ = new PBAPNSUserInfo();
  PBAPNSBody::default_instance_ = new PBAPNSBody();
  PBAPNSMessage::default_instance_ = new PBAPNSMessage();
  PBAPNSEvent::default_instance_ = new PBAPNSEvent();
  PBAPNSUserInfo::default_instance_->InitAsDefaultInstance();
  PBAPNSBody::default_instance_->InitAsDefaultInstance();
  PBAPNSMessage::default_instance_->InitAsDefaultInstance();
  PBAPNSEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_5fmessage_2eproto {
  StaticDescriptorInitializer_pb_5fmessage_2eproto() {
    protobuf_AddDesc_pb_5fmessage_2eproto();
  }
} static_descriptor_initializer_pb_5fmessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PBAPNSUserInfo::kKeyFieldNumber;
const int PBAPNSUserInfo::kValueFieldNumber;
#endif  // !_MSC_VER

PBAPNSUserInfo::PBAPNSUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAPNSUserInfo::InitAsDefaultInstance() {
}

PBAPNSUserInfo::PBAPNSUserInfo(const PBAPNSUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAPNSUserInfo::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAPNSUserInfo::~PBAPNSUserInfo() {
  SharedDtor();
}

void PBAPNSUserInfo::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void PBAPNSUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAPNSUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAPNSUserInfo_descriptor_;
}

const PBAPNSUserInfo& PBAPNSUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fmessage_2eproto();
  return *default_instance_;
}

PBAPNSUserInfo* PBAPNSUserInfo::default_instance_ = NULL;

PBAPNSUserInfo* PBAPNSUserInfo::New() const {
  return new PBAPNSUserInfo;
}

void PBAPNSUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAPNSUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAPNSUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAPNSUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAPNSUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAPNSUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAPNSUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAPNSUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAPNSUserInfo::MergeFrom(const PBAPNSUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAPNSUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAPNSUserInfo::CopyFrom(const PBAPNSUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAPNSUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PBAPNSUserInfo::Swap(PBAPNSUserInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAPNSUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAPNSUserInfo_descriptor_;
  metadata.reflection = PBAPNSUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAPNSBody::kAlertFieldNumber;
const int PBAPNSBody::kSoundFieldNumber;
const int PBAPNSBody::kBadgeFieldNumber;
#endif  // !_MSC_VER

PBAPNSBody::PBAPNSBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAPNSBody::InitAsDefaultInstance() {
}

PBAPNSBody::PBAPNSBody(const PBAPNSBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAPNSBody::SharedCtor() {
  _cached_size_ = 0;
  alert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  badge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAPNSBody::~PBAPNSBody() {
  SharedDtor();
}

void PBAPNSBody::SharedDtor() {
  if (alert_ != &::google::protobuf::internal::kEmptyString) {
    delete alert_;
  }
  if (sound_ != &::google::protobuf::internal::kEmptyString) {
    delete sound_;
  }
  if (this != default_instance_) {
  }
}

void PBAPNSBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAPNSBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAPNSBody_descriptor_;
}

const PBAPNSBody& PBAPNSBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fmessage_2eproto();
  return *default_instance_;
}

PBAPNSBody* PBAPNSBody::default_instance_ = NULL;

PBAPNSBody* PBAPNSBody::New() const {
  return new PBAPNSBody;
}

void PBAPNSBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alert()) {
      if (alert_ != &::google::protobuf::internal::kEmptyString) {
        alert_->clear();
      }
    }
    if (has_sound()) {
      if (sound_ != &::google::protobuf::internal::kEmptyString) {
        sound_->clear();
      }
    }
    badge_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAPNSBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string alert = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alert()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alert().data(), this->alert().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sound;
        break;
      }

      // optional string sound = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sound().data(), this->sound().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_badge;
        break;
      }

      // optional int32 badge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badge_)));
          set_has_badge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAPNSBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string alert = 1;
  if (has_alert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alert().data(), this->alert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->alert(), output);
  }

  // optional string sound = 2;
  if (has_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sound().data(), this->sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sound(), output);
  }

  // optional int32 badge = 3;
  if (has_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->badge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAPNSBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string alert = 1;
  if (has_alert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alert().data(), this->alert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alert(), target);
  }

  // optional string sound = 2;
  if (has_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sound().data(), this->sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sound(), target);
  }

  // optional int32 badge = 3;
  if (has_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->badge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAPNSBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string alert = 1;
    if (has_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alert());
    }

    // optional string sound = 2;
    if (has_sound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sound());
    }

    // optional int32 badge = 3;
    if (has_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAPNSBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAPNSBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAPNSBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAPNSBody::MergeFrom(const PBAPNSBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alert()) {
      set_alert(from.alert());
    }
    if (from.has_sound()) {
      set_sound(from.sound());
    }
    if (from.has_badge()) {
      set_badge(from.badge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAPNSBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAPNSBody::CopyFrom(const PBAPNSBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAPNSBody::IsInitialized() const {

  return true;
}

void PBAPNSBody::Swap(PBAPNSBody* other) {
  if (other != this) {
    std::swap(alert_, other->alert_);
    std::swap(sound_, other->sound_);
    std::swap(badge_, other->badge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAPNSBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAPNSBody_descriptor_;
  metadata.reflection = PBAPNSBody_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PBAPNSMessage_OfflineModes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAPNSMessage_OfflineModes_descriptor_;
}
bool PBAPNSMessage_OfflineModes_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PBAPNSMessage_OfflineModes PBAPNSMessage::Ignore;
const PBAPNSMessage_OfflineModes PBAPNSMessage::APNS;
const PBAPNSMessage_OfflineModes PBAPNSMessage::SendAfterOnline;
const PBAPNSMessage_OfflineModes PBAPNSMessage::OfflineModes_MIN;
const PBAPNSMessage_OfflineModes PBAPNSMessage::OfflineModes_MAX;
const int PBAPNSMessage::OfflineModes_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PBAPNSMessage::kOfflineModeFieldNumber;
const int PBAPNSMessage::kApsFieldNumber;
const int PBAPNSMessage::kUserInfoFieldNumber;
#endif  // !_MSC_VER

PBAPNSMessage::PBAPNSMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAPNSMessage::InitAsDefaultInstance() {
  aps_ = const_cast< ::message::PBAPNSBody*>(&::message::PBAPNSBody::default_instance());
}

PBAPNSMessage::PBAPNSMessage(const PBAPNSMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAPNSMessage::SharedCtor() {
  _cached_size_ = 0;
  offlinemode_ = 0;
  aps_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAPNSMessage::~PBAPNSMessage() {
  SharedDtor();
}

void PBAPNSMessage::SharedDtor() {
  if (this != default_instance_) {
    delete aps_;
  }
}

void PBAPNSMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAPNSMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAPNSMessage_descriptor_;
}

const PBAPNSMessage& PBAPNSMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fmessage_2eproto();
  return *default_instance_;
}

PBAPNSMessage* PBAPNSMessage::default_instance_ = NULL;

PBAPNSMessage* PBAPNSMessage::New() const {
  return new PBAPNSMessage;
}

void PBAPNSMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offlinemode_ = 0;
    if (has_aps()) {
      if (aps_ != NULL) aps_->::message::PBAPNSBody::Clear();
    }
  }
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAPNSMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offlineMode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offlinemode_)));
          set_has_offlinemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_aps;
        break;
      }

      // required .message.PBAPNSBody aps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userInfo;
        break;
      }

      // repeated .message.PBAPNSUserInfo userInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAPNSMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 offlineMode = 1;
  if (has_offlinemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offlinemode(), output);
  }

  // required .message.PBAPNSBody aps = 2;
  if (has_aps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->aps(), output);
  }

  // repeated .message.PBAPNSUserInfo userInfo = 3;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAPNSMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 offlineMode = 1;
  if (has_offlinemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offlinemode(), target);
  }

  // required .message.PBAPNSBody aps = 2;
  if (has_aps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->aps(), target);
  }

  // repeated .message.PBAPNSUserInfo userInfo = 3;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAPNSMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 offlineMode = 1;
    if (has_offlinemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offlinemode());
    }

    // required .message.PBAPNSBody aps = 2;
    if (has_aps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aps());
    }

  }
  // repeated .message.PBAPNSUserInfo userInfo = 3;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAPNSMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAPNSMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAPNSMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAPNSMessage::MergeFrom(const PBAPNSMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_.MergeFrom(from.userinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offlinemode()) {
      set_offlinemode(from.offlinemode());
    }
    if (from.has_aps()) {
      mutable_aps()->::message::PBAPNSBody::MergeFrom(from.aps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAPNSMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAPNSMessage::CopyFrom(const PBAPNSMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAPNSMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < userinfo_size(); i++) {
    if (!this->userinfo(i).IsInitialized()) return false;
  }
  return true;
}

void PBAPNSMessage::Swap(PBAPNSMessage* other) {
  if (other != this) {
    std::swap(offlinemode_, other->offlinemode_);
    std::swap(aps_, other->aps_);
    userinfo_.Swap(&other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAPNSMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAPNSMessage_descriptor_;
  metadata.reflection = PBAPNSMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PBAPNSEvent_Ops_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAPNSEvent_Ops_descriptor_;
}
bool PBAPNSEvent_Ops_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PBAPNSEvent_Ops PBAPNSEvent::Online;
const PBAPNSEvent_Ops PBAPNSEvent::KeepAlive;
const PBAPNSEvent_Ops PBAPNSEvent::PushAck;
const PBAPNSEvent_Ops PBAPNSEvent::Offline;
const PBAPNSEvent_Ops PBAPNSEvent::Error;
const PBAPNSEvent_Ops PBAPNSEvent::Sleep;
const PBAPNSEvent_Ops PBAPNSEvent::Awake;
const PBAPNSEvent_Ops PBAPNSEvent::Ops_MIN;
const PBAPNSEvent_Ops PBAPNSEvent::Ops_MAX;
const int PBAPNSEvent::Ops_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PBAPNSEvent_DeviceTypes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAPNSEvent_DeviceTypes_descriptor_;
}
bool PBAPNSEvent_DeviceTypes_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PBAPNSEvent_DeviceTypes PBAPNSEvent::iOS;
const PBAPNSEvent_DeviceTypes PBAPNSEvent::Android;
const PBAPNSEvent_DeviceTypes PBAPNSEvent::DeviceTypes_MIN;
const PBAPNSEvent_DeviceTypes PBAPNSEvent::DeviceTypes_MAX;
const int PBAPNSEvent::DeviceTypes_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PBAPNSEvent::kOpFieldNumber;
const int PBAPNSEvent::kTokenFieldNumber;
const int PBAPNSEvent::kAppKeyFieldNumber;
const int PBAPNSEvent::kUserIdFieldNumber;
const int PBAPNSEvent::kTypeIdFieldNumber;
const int PBAPNSEvent::kReadFieldNumber;
#endif  // !_MSC_VER

PBAPNSEvent::PBAPNSEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAPNSEvent::InitAsDefaultInstance() {
}

PBAPNSEvent::PBAPNSEvent(const PBAPNSEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAPNSEvent::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  typeid__ = 0;
  read_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAPNSEvent::~PBAPNSEvent() {
  SharedDtor();
}

void PBAPNSEvent::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (appkey_ != &::google::protobuf::internal::kEmptyString) {
    delete appkey_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void PBAPNSEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAPNSEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAPNSEvent_descriptor_;
}

const PBAPNSEvent& PBAPNSEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fmessage_2eproto();
  return *default_instance_;
}

PBAPNSEvent* PBAPNSEvent::default_instance_ = NULL;

PBAPNSEvent* PBAPNSEvent::New() const {
  return new PBAPNSEvent;
}

void PBAPNSEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_appkey()) {
      if (appkey_ != &::google::protobuf::internal::kEmptyString) {
        appkey_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    typeid__ = 0;
    read_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAPNSEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appKey;
        break;
      }

      // required string appKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appkey().data(), this->appkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userId;
        break;
      }

      // required string userId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_typeId;
        break;
      }

      // required int32 typeId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_read;
        break;
      }

      // optional int32 read = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_)));
          set_has_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAPNSEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  // required string appKey = 3;
  if (has_appkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appkey().data(), this->appkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appkey(), output);
  }

  // required string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }

  // required int32 typeId = 5;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->typeid_(), output);
  }

  // optional int32 read = 6;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->read(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAPNSEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // required string appKey = 3;
  if (has_appkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appkey().data(), this->appkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appkey(), target);
  }

  // required string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  // required int32 typeId = 5;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->typeid_(), target);
  }

  // optional int32 read = 6;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->read(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAPNSEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required string appKey = 3;
    if (has_appkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appkey());
    }

    // required string userId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required int32 typeId = 5;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // optional int32 read = 6;
    if (has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->read());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAPNSEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAPNSEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAPNSEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAPNSEvent::MergeFrom(const PBAPNSEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_appkey()) {
      set_appkey(from.appkey());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_read()) {
      set_read(from.read());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAPNSEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAPNSEvent::CopyFrom(const PBAPNSEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAPNSEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PBAPNSEvent::Swap(PBAPNSEvent* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(token_, other->token_);
    std::swap(appkey_, other->appkey_);
    std::swap(userid_, other->userid_);
    std::swap(typeid__, other->typeid__);
    std::swap(read_, other->read_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAPNSEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAPNSEvent_descriptor_;
  metadata.reflection = PBAPNSEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
