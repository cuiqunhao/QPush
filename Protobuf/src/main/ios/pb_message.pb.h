// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_message.proto

#ifndef PROTOBUF_pb_5fmessage_2eproto__INCLUDED
#define PROTOBUF_pb_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pb_5fmessage_2eproto();
void protobuf_AssignDesc_pb_5fmessage_2eproto();
void protobuf_ShutdownFile_pb_5fmessage_2eproto();

class PBAPNSUserInfo;
class PBAPNSBody;
class PBAPNSMessage;
class PBAPNSEvent;

enum PBAPNSMessage_OfflineModes {
  PBAPNSMessage_OfflineModes_Ignore = 0,
  PBAPNSMessage_OfflineModes_APNS = 1,
  PBAPNSMessage_OfflineModes_SendAfterOnline = 2
};
bool PBAPNSMessage_OfflineModes_IsValid(int value);
const PBAPNSMessage_OfflineModes PBAPNSMessage_OfflineModes_OfflineModes_MIN = PBAPNSMessage_OfflineModes_Ignore;
const PBAPNSMessage_OfflineModes PBAPNSMessage_OfflineModes_OfflineModes_MAX = PBAPNSMessage_OfflineModes_SendAfterOnline;
const int PBAPNSMessage_OfflineModes_OfflineModes_ARRAYSIZE = PBAPNSMessage_OfflineModes_OfflineModes_MAX + 1;

const ::google::protobuf::EnumDescriptor* PBAPNSMessage_OfflineModes_descriptor();
inline const ::std::string& PBAPNSMessage_OfflineModes_Name(PBAPNSMessage_OfflineModes value) {
  return ::google::protobuf::internal::NameOfEnum(
    PBAPNSMessage_OfflineModes_descriptor(), value);
}
inline bool PBAPNSMessage_OfflineModes_Parse(
    const ::std::string& name, PBAPNSMessage_OfflineModes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PBAPNSMessage_OfflineModes>(
    PBAPNSMessage_OfflineModes_descriptor(), name, value);
}
enum PBAPNSMessage_APNSModes {
  PBAPNSMessage_APNSModes_All = 0,
  PBAPNSMessage_APNSModes_Signined = 1
};
bool PBAPNSMessage_APNSModes_IsValid(int value);
const PBAPNSMessage_APNSModes PBAPNSMessage_APNSModes_APNSModes_MIN = PBAPNSMessage_APNSModes_All;
const PBAPNSMessage_APNSModes PBAPNSMessage_APNSModes_APNSModes_MAX = PBAPNSMessage_APNSModes_Signined;
const int PBAPNSMessage_APNSModes_APNSModes_ARRAYSIZE = PBAPNSMessage_APNSModes_APNSModes_MAX + 1;

const ::google::protobuf::EnumDescriptor* PBAPNSMessage_APNSModes_descriptor();
inline const ::std::string& PBAPNSMessage_APNSModes_Name(PBAPNSMessage_APNSModes value) {
  return ::google::protobuf::internal::NameOfEnum(
    PBAPNSMessage_APNSModes_descriptor(), value);
}
inline bool PBAPNSMessage_APNSModes_Parse(
    const ::std::string& name, PBAPNSMessage_APNSModes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PBAPNSMessage_APNSModes>(
    PBAPNSMessage_APNSModes_descriptor(), name, value);
}
enum PBAPNSEvent_Ops {
  PBAPNSEvent_Ops_Online = 1,
  PBAPNSEvent_Ops_KeepAlive = 2,
  PBAPNSEvent_Ops_PushAck = 3,
  PBAPNSEvent_Ops_Offline = 4,
  PBAPNSEvent_Ops_Error = 0,
  PBAPNSEvent_Ops_Sleep = 5,
  PBAPNSEvent_Ops_Awake = 6
};
bool PBAPNSEvent_Ops_IsValid(int value);
const PBAPNSEvent_Ops PBAPNSEvent_Ops_Ops_MIN = PBAPNSEvent_Ops_Error;
const PBAPNSEvent_Ops PBAPNSEvent_Ops_Ops_MAX = PBAPNSEvent_Ops_Awake;
const int PBAPNSEvent_Ops_Ops_ARRAYSIZE = PBAPNSEvent_Ops_Ops_MAX + 1;

const ::google::protobuf::EnumDescriptor* PBAPNSEvent_Ops_descriptor();
inline const ::std::string& PBAPNSEvent_Ops_Name(PBAPNSEvent_Ops value) {
  return ::google::protobuf::internal::NameOfEnum(
    PBAPNSEvent_Ops_descriptor(), value);
}
inline bool PBAPNSEvent_Ops_Parse(
    const ::std::string& name, PBAPNSEvent_Ops* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PBAPNSEvent_Ops>(
    PBAPNSEvent_Ops_descriptor(), name, value);
}
enum PBAPNSEvent_DeviceTypes {
  PBAPNSEvent_DeviceTypes_iPhone = 1,
  PBAPNSEvent_DeviceTypes_iPad = 2,
  PBAPNSEvent_DeviceTypes_Android = 3
};
bool PBAPNSEvent_DeviceTypes_IsValid(int value);
const PBAPNSEvent_DeviceTypes PBAPNSEvent_DeviceTypes_DeviceTypes_MIN = PBAPNSEvent_DeviceTypes_iPhone;
const PBAPNSEvent_DeviceTypes PBAPNSEvent_DeviceTypes_DeviceTypes_MAX = PBAPNSEvent_DeviceTypes_Android;
const int PBAPNSEvent_DeviceTypes_DeviceTypes_ARRAYSIZE = PBAPNSEvent_DeviceTypes_DeviceTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* PBAPNSEvent_DeviceTypes_descriptor();
inline const ::std::string& PBAPNSEvent_DeviceTypes_Name(PBAPNSEvent_DeviceTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    PBAPNSEvent_DeviceTypes_descriptor(), value);
}
inline bool PBAPNSEvent_DeviceTypes_Parse(
    const ::std::string& name, PBAPNSEvent_DeviceTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PBAPNSEvent_DeviceTypes>(
    PBAPNSEvent_DeviceTypes_descriptor(), name, value);
}
// ===================================================================

class PBAPNSUserInfo : public ::google::protobuf::Message {
 public:
  PBAPNSUserInfo();
  virtual ~PBAPNSUserInfo();

  PBAPNSUserInfo(const PBAPNSUserInfo& from);

  inline PBAPNSUserInfo& operator=(const PBAPNSUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAPNSUserInfo& default_instance();

  void Swap(PBAPNSUserInfo* other);

  // implements Message ----------------------------------------------

  PBAPNSUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAPNSUserInfo& from);
  void MergeFrom(const PBAPNSUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:message.PBAPNSUserInfo)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_pb_5fmessage_2eproto();
  friend void protobuf_AssignDesc_pb_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_pb_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static PBAPNSUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBAPNSBody : public ::google::protobuf::Message {
 public:
  PBAPNSBody();
  virtual ~PBAPNSBody();

  PBAPNSBody(const PBAPNSBody& from);

  inline PBAPNSBody& operator=(const PBAPNSBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAPNSBody& default_instance();

  void Swap(PBAPNSBody* other);

  // implements Message ----------------------------------------------

  PBAPNSBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAPNSBody& from);
  void MergeFrom(const PBAPNSBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string alert = 1;
  inline bool has_alert() const;
  inline void clear_alert();
  static const int kAlertFieldNumber = 1;
  inline const ::std::string& alert() const;
  inline void set_alert(const ::std::string& value);
  inline void set_alert(const char* value);
  inline void set_alert(const char* value, size_t size);
  inline ::std::string* mutable_alert();
  inline ::std::string* release_alert();
  inline void set_allocated_alert(::std::string* alert);

  // optional string sound = 2;
  inline bool has_sound() const;
  inline void clear_sound();
  static const int kSoundFieldNumber = 2;
  inline const ::std::string& sound() const;
  inline void set_sound(const ::std::string& value);
  inline void set_sound(const char* value);
  inline void set_sound(const char* value, size_t size);
  inline ::std::string* mutable_sound();
  inline ::std::string* release_sound();
  inline void set_allocated_sound(::std::string* sound);

  // optional int32 badge = 3;
  inline bool has_badge() const;
  inline void clear_badge();
  static const int kBadgeFieldNumber = 3;
  inline ::google::protobuf::int32 badge() const;
  inline void set_badge(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:message.PBAPNSBody)
 private:
  inline void set_has_alert();
  inline void clear_has_alert();
  inline void set_has_sound();
  inline void clear_has_sound();
  inline void set_has_badge();
  inline void clear_has_badge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* alert_;
  ::std::string* sound_;
  ::google::protobuf::int32 badge_;
  friend void  protobuf_AddDesc_pb_5fmessage_2eproto();
  friend void protobuf_AssignDesc_pb_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_pb_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static PBAPNSBody* default_instance_;
};
// -------------------------------------------------------------------

class PBAPNSMessage : public ::google::protobuf::Message {
 public:
  PBAPNSMessage();
  virtual ~PBAPNSMessage();

  PBAPNSMessage(const PBAPNSMessage& from);

  inline PBAPNSMessage& operator=(const PBAPNSMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAPNSMessage& default_instance();

  void Swap(PBAPNSMessage* other);

  // implements Message ----------------------------------------------

  PBAPNSMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAPNSMessage& from);
  void MergeFrom(const PBAPNSMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PBAPNSMessage_OfflineModes OfflineModes;
  static const OfflineModes Ignore = PBAPNSMessage_OfflineModes_Ignore;
  static const OfflineModes APNS = PBAPNSMessage_OfflineModes_APNS;
  static const OfflineModes SendAfterOnline = PBAPNSMessage_OfflineModes_SendAfterOnline;
  static inline bool OfflineModes_IsValid(int value) {
    return PBAPNSMessage_OfflineModes_IsValid(value);
  }
  static const OfflineModes OfflineModes_MIN =
    PBAPNSMessage_OfflineModes_OfflineModes_MIN;
  static const OfflineModes OfflineModes_MAX =
    PBAPNSMessage_OfflineModes_OfflineModes_MAX;
  static const int OfflineModes_ARRAYSIZE =
    PBAPNSMessage_OfflineModes_OfflineModes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OfflineModes_descriptor() {
    return PBAPNSMessage_OfflineModes_descriptor();
  }
  static inline const ::std::string& OfflineModes_Name(OfflineModes value) {
    return PBAPNSMessage_OfflineModes_Name(value);
  }
  static inline bool OfflineModes_Parse(const ::std::string& name,
      OfflineModes* value) {
    return PBAPNSMessage_OfflineModes_Parse(name, value);
  }

  typedef PBAPNSMessage_APNSModes APNSModes;
  static const APNSModes All = PBAPNSMessage_APNSModes_All;
  static const APNSModes Signined = PBAPNSMessage_APNSModes_Signined;
  static inline bool APNSModes_IsValid(int value) {
    return PBAPNSMessage_APNSModes_IsValid(value);
  }
  static const APNSModes APNSModes_MIN =
    PBAPNSMessage_APNSModes_APNSModes_MIN;
  static const APNSModes APNSModes_MAX =
    PBAPNSMessage_APNSModes_APNSModes_MAX;
  static const int APNSModes_ARRAYSIZE =
    PBAPNSMessage_APNSModes_APNSModes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  APNSModes_descriptor() {
    return PBAPNSMessage_APNSModes_descriptor();
  }
  static inline const ::std::string& APNSModes_Name(APNSModes value) {
    return PBAPNSMessage_APNSModes_Name(value);
  }
  static inline bool APNSModes_Parse(const ::std::string& name,
      APNSModes* value) {
    return PBAPNSMessage_APNSModes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 offlineMode = 1;
  inline bool has_offlinemode() const;
  inline void clear_offlinemode();
  static const int kOfflineModeFieldNumber = 1;
  inline ::google::protobuf::int32 offlinemode() const;
  inline void set_offlinemode(::google::protobuf::int32 value);

  // required .message.PBAPNSBody aps = 2;
  inline bool has_aps() const;
  inline void clear_aps();
  static const int kApsFieldNumber = 2;
  inline const ::message::PBAPNSBody& aps() const;
  inline ::message::PBAPNSBody* mutable_aps();
  inline ::message::PBAPNSBody* release_aps();
  inline void set_allocated_aps(::message::PBAPNSBody* aps);

  // repeated .message.PBAPNSUserInfo userInfo = 3;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 3;
  inline const ::message::PBAPNSUserInfo& userinfo(int index) const;
  inline ::message::PBAPNSUserInfo* mutable_userinfo(int index);
  inline ::message::PBAPNSUserInfo* add_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::message::PBAPNSUserInfo >&
      userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::PBAPNSUserInfo >*
      mutable_userinfo();

  // optional int32 apnsMode = 4;
  inline bool has_apnsmode() const;
  inline void clear_apnsmode();
  static const int kApnsModeFieldNumber = 4;
  inline ::google::protobuf::int32 apnsmode() const;
  inline void set_apnsmode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:message.PBAPNSMessage)
 private:
  inline void set_has_offlinemode();
  inline void clear_has_offlinemode();
  inline void set_has_aps();
  inline void clear_has_aps();
  inline void set_has_apnsmode();
  inline void clear_has_apnsmode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::message::PBAPNSBody* aps_;
  ::google::protobuf::int32 offlinemode_;
  ::google::protobuf::int32 apnsmode_;
  ::google::protobuf::RepeatedPtrField< ::message::PBAPNSUserInfo > userinfo_;
  friend void  protobuf_AddDesc_pb_5fmessage_2eproto();
  friend void protobuf_AssignDesc_pb_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_pb_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static PBAPNSMessage* default_instance_;
};
// -------------------------------------------------------------------

class PBAPNSEvent : public ::google::protobuf::Message {
 public:
  PBAPNSEvent();
  virtual ~PBAPNSEvent();

  PBAPNSEvent(const PBAPNSEvent& from);

  inline PBAPNSEvent& operator=(const PBAPNSEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAPNSEvent& default_instance();

  void Swap(PBAPNSEvent* other);

  // implements Message ----------------------------------------------

  PBAPNSEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAPNSEvent& from);
  void MergeFrom(const PBAPNSEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PBAPNSEvent_Ops Ops;
  static const Ops Online = PBAPNSEvent_Ops_Online;
  static const Ops KeepAlive = PBAPNSEvent_Ops_KeepAlive;
  static const Ops PushAck = PBAPNSEvent_Ops_PushAck;
  static const Ops Offline = PBAPNSEvent_Ops_Offline;
  static const Ops Error = PBAPNSEvent_Ops_Error;
  static const Ops Sleep = PBAPNSEvent_Ops_Sleep;
  static const Ops Awake = PBAPNSEvent_Ops_Awake;
  static inline bool Ops_IsValid(int value) {
    return PBAPNSEvent_Ops_IsValid(value);
  }
  static const Ops Ops_MIN =
    PBAPNSEvent_Ops_Ops_MIN;
  static const Ops Ops_MAX =
    PBAPNSEvent_Ops_Ops_MAX;
  static const int Ops_ARRAYSIZE =
    PBAPNSEvent_Ops_Ops_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ops_descriptor() {
    return PBAPNSEvent_Ops_descriptor();
  }
  static inline const ::std::string& Ops_Name(Ops value) {
    return PBAPNSEvent_Ops_Name(value);
  }
  static inline bool Ops_Parse(const ::std::string& name,
      Ops* value) {
    return PBAPNSEvent_Ops_Parse(name, value);
  }

  typedef PBAPNSEvent_DeviceTypes DeviceTypes;
  static const DeviceTypes iPhone = PBAPNSEvent_DeviceTypes_iPhone;
  static const DeviceTypes iPad = PBAPNSEvent_DeviceTypes_iPad;
  static const DeviceTypes Android = PBAPNSEvent_DeviceTypes_Android;
  static inline bool DeviceTypes_IsValid(int value) {
    return PBAPNSEvent_DeviceTypes_IsValid(value);
  }
  static const DeviceTypes DeviceTypes_MIN =
    PBAPNSEvent_DeviceTypes_DeviceTypes_MIN;
  static const DeviceTypes DeviceTypes_MAX =
    PBAPNSEvent_DeviceTypes_DeviceTypes_MAX;
  static const int DeviceTypes_ARRAYSIZE =
    PBAPNSEvent_DeviceTypes_DeviceTypes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeviceTypes_descriptor() {
    return PBAPNSEvent_DeviceTypes_descriptor();
  }
  static inline const ::std::string& DeviceTypes_Name(DeviceTypes value) {
    return PBAPNSEvent_DeviceTypes_Name(value);
  }
  static inline bool DeviceTypes_Parse(const ::std::string& name,
      DeviceTypes* value) {
    return PBAPNSEvent_DeviceTypes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 op = 1;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 1;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required string appKey = 3;
  inline bool has_appkey() const;
  inline void clear_appkey();
  static const int kAppKeyFieldNumber = 3;
  inline const ::std::string& appkey() const;
  inline void set_appkey(const ::std::string& value);
  inline void set_appkey(const char* value);
  inline void set_appkey(const char* value, size_t size);
  inline ::std::string* mutable_appkey();
  inline ::std::string* release_appkey();
  inline void set_allocated_appkey(::std::string* appkey);

  // required string userId = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 4;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // required int32 typeId = 5;
  inline bool has_typeid_() const;
  inline void clear_typeid_();
  static const int kTypeIdFieldNumber = 5;
  inline ::google::protobuf::int32 typeid_() const;
  inline void set_typeid_(::google::protobuf::int32 value);

  // optional int32 read = 6;
  inline bool has_read() const;
  inline void clear_read();
  static const int kReadFieldNumber = 6;
  inline ::google::protobuf::int32 read() const;
  inline void set_read(::google::protobuf::int32 value);

  // optional string deviceId = 7;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 7;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // @@protoc_insertion_point(class_scope:message.PBAPNSEvent)
 private:
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_appkey();
  inline void clear_has_appkey();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_typeid_();
  inline void clear_has_typeid_();
  inline void set_has_read();
  inline void clear_has_read();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::std::string* appkey_;
  ::google::protobuf::int32 op_;
  ::google::protobuf::int32 typeid__;
  ::std::string* userid_;
  ::std::string* deviceid_;
  ::google::protobuf::int32 read_;
  friend void  protobuf_AddDesc_pb_5fmessage_2eproto();
  friend void protobuf_AssignDesc_pb_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_pb_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static PBAPNSEvent* default_instance_;
};
// ===================================================================


// ===================================================================

// PBAPNSUserInfo

// required string key = 1;
inline bool PBAPNSUserInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAPNSUserInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAPNSUserInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAPNSUserInfo::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PBAPNSUserInfo::key() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSUserInfo.key)
  return *key_;
}
inline void PBAPNSUserInfo::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:message.PBAPNSUserInfo.key)
}
inline void PBAPNSUserInfo::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:message.PBAPNSUserInfo.key)
}
inline void PBAPNSUserInfo::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.PBAPNSUserInfo.key)
}
inline ::std::string* PBAPNSUserInfo::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:message.PBAPNSUserInfo.key)
  return key_;
}
inline ::std::string* PBAPNSUserInfo::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBAPNSUserInfo::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:message.PBAPNSUserInfo.key)
}

// required string value = 2;
inline bool PBAPNSUserInfo::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBAPNSUserInfo::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBAPNSUserInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBAPNSUserInfo::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PBAPNSUserInfo::value() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSUserInfo.value)
  return *value_;
}
inline void PBAPNSUserInfo::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:message.PBAPNSUserInfo.value)
}
inline void PBAPNSUserInfo::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:message.PBAPNSUserInfo.value)
}
inline void PBAPNSUserInfo::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.PBAPNSUserInfo.value)
}
inline ::std::string* PBAPNSUserInfo::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:message.PBAPNSUserInfo.value)
  return value_;
}
inline ::std::string* PBAPNSUserInfo::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBAPNSUserInfo::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:message.PBAPNSUserInfo.value)
}

// -------------------------------------------------------------------

// PBAPNSBody

// optional string alert = 1;
inline bool PBAPNSBody::has_alert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAPNSBody::set_has_alert() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAPNSBody::clear_has_alert() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAPNSBody::clear_alert() {
  if (alert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alert_->clear();
  }
  clear_has_alert();
}
inline const ::std::string& PBAPNSBody::alert() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSBody.alert)
  return *alert_;
}
inline void PBAPNSBody::set_alert(const ::std::string& value) {
  set_has_alert();
  if (alert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alert_ = new ::std::string;
  }
  alert_->assign(value);
  // @@protoc_insertion_point(field_set:message.PBAPNSBody.alert)
}
inline void PBAPNSBody::set_alert(const char* value) {
  set_has_alert();
  if (alert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alert_ = new ::std::string;
  }
  alert_->assign(value);
  // @@protoc_insertion_point(field_set_char:message.PBAPNSBody.alert)
}
inline void PBAPNSBody::set_alert(const char* value, size_t size) {
  set_has_alert();
  if (alert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alert_ = new ::std::string;
  }
  alert_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.PBAPNSBody.alert)
}
inline ::std::string* PBAPNSBody::mutable_alert() {
  set_has_alert();
  if (alert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alert_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:message.PBAPNSBody.alert)
  return alert_;
}
inline ::std::string* PBAPNSBody::release_alert() {
  clear_has_alert();
  if (alert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alert_;
    alert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBAPNSBody::set_allocated_alert(::std::string* alert) {
  if (alert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alert_;
  }
  if (alert) {
    set_has_alert();
    alert_ = alert;
  } else {
    clear_has_alert();
    alert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:message.PBAPNSBody.alert)
}

// optional string sound = 2;
inline bool PBAPNSBody::has_sound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBAPNSBody::set_has_sound() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBAPNSBody::clear_has_sound() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBAPNSBody::clear_sound() {
  if (sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sound_->clear();
  }
  clear_has_sound();
}
inline const ::std::string& PBAPNSBody::sound() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSBody.sound)
  return *sound_;
}
inline void PBAPNSBody::set_sound(const ::std::string& value) {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sound_ = new ::std::string;
  }
  sound_->assign(value);
  // @@protoc_insertion_point(field_set:message.PBAPNSBody.sound)
}
inline void PBAPNSBody::set_sound(const char* value) {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sound_ = new ::std::string;
  }
  sound_->assign(value);
  // @@protoc_insertion_point(field_set_char:message.PBAPNSBody.sound)
}
inline void PBAPNSBody::set_sound(const char* value, size_t size) {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sound_ = new ::std::string;
  }
  sound_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.PBAPNSBody.sound)
}
inline ::std::string* PBAPNSBody::mutable_sound() {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sound_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:message.PBAPNSBody.sound)
  return sound_;
}
inline ::std::string* PBAPNSBody::release_sound() {
  clear_has_sound();
  if (sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sound_;
    sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBAPNSBody::set_allocated_sound(::std::string* sound) {
  if (sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sound_;
  }
  if (sound) {
    set_has_sound();
    sound_ = sound;
  } else {
    clear_has_sound();
    sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:message.PBAPNSBody.sound)
}

// optional int32 badge = 3;
inline bool PBAPNSBody::has_badge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBAPNSBody::set_has_badge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBAPNSBody::clear_has_badge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBAPNSBody::clear_badge() {
  badge_ = 0;
  clear_has_badge();
}
inline ::google::protobuf::int32 PBAPNSBody::badge() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSBody.badge)
  return badge_;
}
inline void PBAPNSBody::set_badge(::google::protobuf::int32 value) {
  set_has_badge();
  badge_ = value;
  // @@protoc_insertion_point(field_set:message.PBAPNSBody.badge)
}

// -------------------------------------------------------------------

// PBAPNSMessage

// optional int32 offlineMode = 1;
inline bool PBAPNSMessage::has_offlinemode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAPNSMessage::set_has_offlinemode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAPNSMessage::clear_has_offlinemode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAPNSMessage::clear_offlinemode() {
  offlinemode_ = 0;
  clear_has_offlinemode();
}
inline ::google::protobuf::int32 PBAPNSMessage::offlinemode() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSMessage.offlineMode)
  return offlinemode_;
}
inline void PBAPNSMessage::set_offlinemode(::google::protobuf::int32 value) {
  set_has_offlinemode();
  offlinemode_ = value;
  // @@protoc_insertion_point(field_set:message.PBAPNSMessage.offlineMode)
}

// required .message.PBAPNSBody aps = 2;
inline bool PBAPNSMessage::has_aps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBAPNSMessage::set_has_aps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBAPNSMessage::clear_has_aps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBAPNSMessage::clear_aps() {
  if (aps_ != NULL) aps_->::message::PBAPNSBody::Clear();
  clear_has_aps();
}
inline const ::message::PBAPNSBody& PBAPNSMessage::aps() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSMessage.aps)
  return aps_ != NULL ? *aps_ : *default_instance_->aps_;
}
inline ::message::PBAPNSBody* PBAPNSMessage::mutable_aps() {
  set_has_aps();
  if (aps_ == NULL) aps_ = new ::message::PBAPNSBody;
  // @@protoc_insertion_point(field_mutable:message.PBAPNSMessage.aps)
  return aps_;
}
inline ::message::PBAPNSBody* PBAPNSMessage::release_aps() {
  clear_has_aps();
  ::message::PBAPNSBody* temp = aps_;
  aps_ = NULL;
  return temp;
}
inline void PBAPNSMessage::set_allocated_aps(::message::PBAPNSBody* aps) {
  delete aps_;
  aps_ = aps;
  if (aps) {
    set_has_aps();
  } else {
    clear_has_aps();
  }
  // @@protoc_insertion_point(field_set_allocated:message.PBAPNSMessage.aps)
}

// repeated .message.PBAPNSUserInfo userInfo = 3;
inline int PBAPNSMessage::userinfo_size() const {
  return userinfo_.size();
}
inline void PBAPNSMessage::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::message::PBAPNSUserInfo& PBAPNSMessage::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:message.PBAPNSMessage.userInfo)
  return userinfo_.Get(index);
}
inline ::message::PBAPNSUserInfo* PBAPNSMessage::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:message.PBAPNSMessage.userInfo)
  return userinfo_.Mutable(index);
}
inline ::message::PBAPNSUserInfo* PBAPNSMessage::add_userinfo() {
  // @@protoc_insertion_point(field_add:message.PBAPNSMessage.userInfo)
  return userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::PBAPNSUserInfo >&
PBAPNSMessage::userinfo() const {
  // @@protoc_insertion_point(field_list:message.PBAPNSMessage.userInfo)
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::PBAPNSUserInfo >*
PBAPNSMessage::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:message.PBAPNSMessage.userInfo)
  return &userinfo_;
}

// optional int32 apnsMode = 4;
inline bool PBAPNSMessage::has_apnsmode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBAPNSMessage::set_has_apnsmode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBAPNSMessage::clear_has_apnsmode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBAPNSMessage::clear_apnsmode() {
  apnsmode_ = 0;
  clear_has_apnsmode();
}
inline ::google::protobuf::int32 PBAPNSMessage::apnsmode() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSMessage.apnsMode)
  return apnsmode_;
}
inline void PBAPNSMessage::set_apnsmode(::google::protobuf::int32 value) {
  set_has_apnsmode();
  apnsmode_ = value;
  // @@protoc_insertion_point(field_set:message.PBAPNSMessage.apnsMode)
}

// -------------------------------------------------------------------

// PBAPNSEvent

// required int32 op = 1;
inline bool PBAPNSEvent::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAPNSEvent::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAPNSEvent::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAPNSEvent::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 PBAPNSEvent::op() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSEvent.op)
  return op_;
}
inline void PBAPNSEvent::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:message.PBAPNSEvent.op)
}

// required string token = 2;
inline bool PBAPNSEvent::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBAPNSEvent::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBAPNSEvent::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBAPNSEvent::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& PBAPNSEvent::token() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSEvent.token)
  return *token_;
}
inline void PBAPNSEvent::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:message.PBAPNSEvent.token)
}
inline void PBAPNSEvent::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:message.PBAPNSEvent.token)
}
inline void PBAPNSEvent::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.PBAPNSEvent.token)
}
inline ::std::string* PBAPNSEvent::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:message.PBAPNSEvent.token)
  return token_;
}
inline ::std::string* PBAPNSEvent::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBAPNSEvent::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:message.PBAPNSEvent.token)
}

// required string appKey = 3;
inline bool PBAPNSEvent::has_appkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBAPNSEvent::set_has_appkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBAPNSEvent::clear_has_appkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBAPNSEvent::clear_appkey() {
  if (appkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appkey_->clear();
  }
  clear_has_appkey();
}
inline const ::std::string& PBAPNSEvent::appkey() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSEvent.appKey)
  return *appkey_;
}
inline void PBAPNSEvent::set_appkey(const ::std::string& value) {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appkey_ = new ::std::string;
  }
  appkey_->assign(value);
  // @@protoc_insertion_point(field_set:message.PBAPNSEvent.appKey)
}
inline void PBAPNSEvent::set_appkey(const char* value) {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appkey_ = new ::std::string;
  }
  appkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:message.PBAPNSEvent.appKey)
}
inline void PBAPNSEvent::set_appkey(const char* value, size_t size) {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appkey_ = new ::std::string;
  }
  appkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.PBAPNSEvent.appKey)
}
inline ::std::string* PBAPNSEvent::mutable_appkey() {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    appkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:message.PBAPNSEvent.appKey)
  return appkey_;
}
inline ::std::string* PBAPNSEvent::release_appkey() {
  clear_has_appkey();
  if (appkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = appkey_;
    appkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBAPNSEvent::set_allocated_appkey(::std::string* appkey) {
  if (appkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appkey_;
  }
  if (appkey) {
    set_has_appkey();
    appkey_ = appkey;
  } else {
    clear_has_appkey();
    appkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:message.PBAPNSEvent.appKey)
}

// required string userId = 4;
inline bool PBAPNSEvent::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBAPNSEvent::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBAPNSEvent::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBAPNSEvent::clear_userid() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& PBAPNSEvent::userid() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSEvent.userId)
  return *userid_;
}
inline void PBAPNSEvent::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set:message.PBAPNSEvent.userId)
}
inline void PBAPNSEvent::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set_char:message.PBAPNSEvent.userId)
}
inline void PBAPNSEvent::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.PBAPNSEvent.userId)
}
inline ::std::string* PBAPNSEvent::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:message.PBAPNSEvent.userId)
  return userid_;
}
inline ::std::string* PBAPNSEvent::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBAPNSEvent::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:message.PBAPNSEvent.userId)
}

// required int32 typeId = 5;
inline bool PBAPNSEvent::has_typeid_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBAPNSEvent::set_has_typeid_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBAPNSEvent::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBAPNSEvent::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 PBAPNSEvent::typeid_() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSEvent.typeId)
  return typeid__;
}
inline void PBAPNSEvent::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:message.PBAPNSEvent.typeId)
}

// optional int32 read = 6;
inline bool PBAPNSEvent::has_read() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBAPNSEvent::set_has_read() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBAPNSEvent::clear_has_read() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBAPNSEvent::clear_read() {
  read_ = 0;
  clear_has_read();
}
inline ::google::protobuf::int32 PBAPNSEvent::read() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSEvent.read)
  return read_;
}
inline void PBAPNSEvent::set_read(::google::protobuf::int32 value) {
  set_has_read();
  read_ = value;
  // @@protoc_insertion_point(field_set:message.PBAPNSEvent.read)
}

// optional string deviceId = 7;
inline bool PBAPNSEvent::has_deviceid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBAPNSEvent::set_has_deviceid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBAPNSEvent::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBAPNSEvent::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& PBAPNSEvent::deviceid() const {
  // @@protoc_insertion_point(field_get:message.PBAPNSEvent.deviceId)
  return *deviceid_;
}
inline void PBAPNSEvent::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set:message.PBAPNSEvent.deviceId)
}
inline void PBAPNSEvent::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:message.PBAPNSEvent.deviceId)
}
inline void PBAPNSEvent::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.PBAPNSEvent.deviceId)
}
inline ::std::string* PBAPNSEvent::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:message.PBAPNSEvent.deviceId)
  return deviceid_;
}
inline ::std::string* PBAPNSEvent::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBAPNSEvent::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:message.PBAPNSEvent.deviceId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::message::PBAPNSMessage_OfflineModes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::PBAPNSMessage_OfflineModes>() {
  return ::message::PBAPNSMessage_OfflineModes_descriptor();
}
template <> struct is_proto_enum< ::message::PBAPNSMessage_APNSModes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::PBAPNSMessage_APNSModes>() {
  return ::message::PBAPNSMessage_APNSModes_descriptor();
}
template <> struct is_proto_enum< ::message::PBAPNSEvent_Ops> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::PBAPNSEvent_Ops>() {
  return ::message::PBAPNSEvent_Ops_descriptor();
}
template <> struct is_proto_enum< ::message::PBAPNSEvent_DeviceTypes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::PBAPNSEvent_DeviceTypes>() {
  return ::message::PBAPNSEvent_DeviceTypes_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_5fmessage_2eproto__INCLUDED
